datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username         String            @unique
  email            String            @unique
  passwordHash     String            @map("password_hash")
  createdAt        DateTime          @default(now()) @map("created_at")
  lastLogin        DateTime?         @map("last_login")
  stats            UserStats?
  achievements     UserAchievement[]
  gameSessions     GameSession[]
  blogPosts        BlogPost[]
  puzzleAttempts   PuzzleAttempt[]
  pushSubscriptions PushSubscription[]

  @@map("users")
}

model Puzzle {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  rebusPuzzle  String        @map("rebus_puzzle")
  answer       String
  explanation  String
  difficulty   Int
  createdAt    DateTime      @default(now()) @map("created_at")
  scheduledFor DateTime      @unique @map("scheduled_for")
  metadata     Json?
  gameSessions GameSession[]
  blogPost     BlogPost?
  attempts     PuzzleAttempt[]

  @@map("puzzles")
}

model UserStats {
  userId               String   @id @map("user_id") @db.Uuid
  points               Int      @default(0)
  streak               Int      @default(0)
  totalGames           Int      @default(0) @map("total_games")
  wins                 Int      @default(0)
  level                Int      @default(1)
  dailyChallengeStreak Int      @default(0) @map("daily_challenge_streak")
  lastPlayDate         DateTime? @map("last_play_date")
  user                 User     @relation(fields: [userId], references: [id])

  @@map("user_stats")
}

model Achievement {
  id          String            @id
  name        String
  description String
  threshold   Int
  users       UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  userId        String     @map("user_id") @db.Uuid
  achievementId String     @map("achievement_id")
  unlockedAt    DateTime   @default(now()) @map("unlocked_at")
  user          User       @relation(fields: [userId], references: [id])
  achievement   Achievement @relation(fields: [achievementId], references: [id])

  @@id([userId, achievementId])
  @@map("user_achievements")
}

model GameSession {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  puzzleId  String   @map("puzzle_id") @db.Uuid
  startTime DateTime @default(now()) @map("start_time")
  endTime   DateTime? @map("end_time")
  attempts  Int      @default(0)
  isSolved  Boolean  @default(false) @map("is_solved")
  user      User     @relation(fields: [userId], references: [id])
  puzzle    Puzzle   @relation(fields: [puzzleId], references: [id])

  @@map("game_sessions")
}

model BlogPost {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  slug        String   @unique
  title       String
  content     String
  excerpt     String
  authorId    String   @map("author_id") @db.Uuid
  publishedAt DateTime @map("published_at")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  metadata    Json?
  author      User     @relation(fields: [authorId], references: [id])
  puzzleId    String   @unique @map("puzzle_id") @db.Uuid
  puzzle      Puzzle   @relation(fields: [puzzleId], references: [id])

  @@map("blog_posts")
}

model Level {
  level     Int    @id
  name      String
  threshold Int

  @@map("levels")
}

model PuzzleAttempt {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  puzzleId  String   @map("puzzle_id") @db.Uuid
  answer    String
  correct   Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id])
  puzzle    Puzzle   @relation(fields: [puzzleId], references: [id])

  @@map("puzzle_attempts")
}

model PushSubscription {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  endpoint  String   @db.Text
  auth      String   @db.Text
  p256dh    String   @db.Text
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, endpoint])
  @@map("push_subscriptions")
}

